// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tracet51/creditChain/tcpServer (interfaces: Protocol)

// Package mock_tcpServer is a generated GoMock package.
package tcpServer

import (
	gomock "github.com/golang/mock/gomock"
	net "net"
	reflect "reflect"
)

// MockProtocol is a mock of Protocol interface
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// ConnectionLost mocks base method
func (m *MockProtocol) ConnectionLost() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionLost")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectionLost indicates an expected call of ConnectionLost
func (mr *MockProtocolMockRecorder) ConnectionLost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionLost", reflect.TypeOf((*MockProtocol)(nil).ConnectionLost))
}

// ConnectionMade mocks base method
func (m *MockProtocol) ConnectionMade(arg0 net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionMade", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectionMade indicates an expected call of ConnectionMade
func (mr *MockProtocolMockRecorder) ConnectionMade(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionMade", reflect.TypeOf((*MockProtocol)(nil).ConnectionMade), arg0)
}

// DataReceived mocks base method
func (m *MockProtocol) DataReceived(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataReceived", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataReceived indicates an expected call of DataReceived
func (mr *MockProtocolMockRecorder) DataReceived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataReceived", reflect.TypeOf((*MockProtocol)(nil).DataReceived), arg0)
}

// Transport mocks base method
func (m *MockProtocol) Transport() net.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transport")
	ret0, _ := ret[0].(net.Conn)
	return ret0
}

// Transport indicates an expected call of Transport
func (mr *MockProtocolMockRecorder) Transport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transport", reflect.TypeOf((*MockProtocol)(nil).Transport))
}
